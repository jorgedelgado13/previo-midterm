---
title: "Previo Midterm"
author: "Jorge Delgado"
date: "04-10-25"
format: html
jupyter: python3
---
# REGRESION LOGISTICA

## Subtitulo 2

```{python}
%pip install --user matplotlib seaborn scikit-learn pandas numpy
```

```{python}
import sklearn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score, roc_curve
import seaborn as sns
```

## GENERAR Y CARGAR DATOS

```{python}
from sklearn.datasets import make_classification

# Generar dataset ficticio
X, y = make_classification(n_samples=1000, n_features=5, 
                           n_informative=3, n_redundant=0, 
                           random_state=42)

# Dividir en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                                    test_size=0.3, 
                                                    random_state=42)
```

### ENTRENAR MODELO

```{python}
# Crear el modelo
modelo = LogisticRegression()

# Entrenar con los datos
modelo.fit(X_train, y_train)
```

### PREDICCIONES

```{python}

# Predicción de clases
y_pred = modelo.predict(X_test)

# Predicción de probabilidades
y_prob = modelo.predict_proba(X_test)[:,1]  # prob. de clase positiva

```

### EVALUACION MODELO

```{python}
# Matriz de confusión
print("Matriz de Confusión:")
print(confusion_matrix(y_test, y_pred))

# Reporte de métricas
print("\nReporte de Clasificación:")
print(classification_report(y_test, y_pred))

# AUC - ROC
auc = roc_auc_score(y_test, y_prob)
print(f"AUC: {auc:.3f}")

```

### VISUALIZACIÓN

```{python}
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
plt.plot(fpr, tpr, label=f'AUC={auc:.2f}')
plt.plot([0,1],[0,1],'--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Curva ROC")
plt.legend()
plt.show()
```

### MATRIZ CONFUSION

```{python}
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=["Clase 0","Clase 1"],
            yticklabels=["Clase 0","Clase 1"])
plt.title("Matriz de Confusión")
plt.show()
```

### jueves 02

```{python}
from sklearn.datasets import load_breast_cancer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, ConfusionMatrixDisplay
```

### CARGAR DATASET

```{python}
data = load_breast_cancer()
#data
X = data.data #columnas
y = data.target #filas
```

### SPLIT

```{python}

X_train, X_test, y_train, y_test = train_test_split(
    X,y,test_size=0.2,random_state=42,stratify=y
)

print(X_train)
print(X_test)
```

### entrena

```{python}
model = LogisticRegression(max_iter=100000)
model.fit(X_train,y_train)
```

### predict

```{python}
y_pred = model.predict(X_test)

```

### evaluacion

```{python}
accurancy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall =recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("accurancy =", accurancy)
print("precision =",precision)
print("recall =", recall)
print("f1 =", f1)
```